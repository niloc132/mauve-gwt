dnl Process this with autoconf to create configure
AC_INIT(gnu/testlet/Testlet.java)
AM_INIT_AUTOMAKE(mauve, 0.0)

dnl Check path and file separator types
ACX_CHECK_PATHNAME_STYLE_DOS

dnl For EXEEXT.
AC_PROG_CC

dnl Check for which JVM should be tested, default to "java"
AC_ARG_WITH(vm,
[  --with-vm=TESTJVM  				Run the tests with TESTJVM],
TEST_JAVA="$with_vm", TEST_JAVA="java")
AC_SUBST(TEST_JAVA)
export MAUVEVM="$TEST_JAVA"


AC_ARG_WITH(gcj,
[  --with-gcj                       Use gcj to compile .class files])
AM_CONDITIONAL(USE_GCJ, test "$with_gcj" = yes)


AC_ARG_WITH(classpath-install-dir,
[  --with-classpath-install-dir=CPINSTALL   Specify the location of Classpath's install dir],
CP_INSTALL_DIR="$with_classpath_install_dir")
if ! test -d "$CP_INSTALL_DIR"
then
CP_INSTALL_DIR=""
fi
AC_SUBST(CP_INSTALL_DIR)


AC_ARG_WITH(ecj-jar,
[  --with-ecj-jar=JARLOCATION       Use the ecj jar found at JARLOCATION for auto-compilation],
ECJ_JAR="$with_ecj_jar", ECJ_JAR=yes)
if test "$ECJ_JAR" = "yes"
then
ECJ_JAR="/usr/share/java/eclipse-ecj.jar"
fi

AC_SUBST(ECJ_JAR)

dnl auto-compilation is disabled by default because it requires the
dnl --with-classpath-install-dir option to be used as well, and so
dnl by disabling it, the standard "./configure" setup has a better
dnl chance of producing meaningful results.  If it were enabled
dnl by default many tests would fail because the compiler wouldn't
dnl have the correct bootclasspath
AC_ARG_ENABLE(auto-compile,
[  --enable-auto-compile            Use ecj to compile tests on the fly],
AUTO_COMPILE="$enable_auto_compile",AUTO_COMPILE="no")
AC_SUBST(AUTO_COMPILE)

dnl See if the user prefers to build .class files with gcj, or whether
dnl javac will be used.  The default is to use gcj if we're compiling
dnl with gcj.
AC_ARG_ENABLE(gcj-classes,
[  --enable-gcj-classes             Use gcj, not javac, to build class files],
   gcj_classes="$enable_gcj_classes", gcj_classes=maybe)
if test "$gcj_classes" = yes \
   || (test "$gcj_classes" = maybe && test "$with_gcj" = yes); then
   JAVAC='$(GCJ) -C'
fi

dnl If we're using gcj, the default is not to build class files at all.
AC_ARG_ENABLE(class-files,
[  --enable-class-files             Create class files when using gcj],
   class_files="$enable_class_files",
   if test "$with_gcj" = yes; then
      class_files=no
   else
      class_files=yes
   fi)
AM_CONDITIONAL(CLASS_FILES, test "$class_files" = yes)

JAVA=${JAVA-java}
AC_SUBST(JAVA)
JAVAC=${JAVAC-javac}
AC_SUBST(JAVAC)

AM_PROG_GCJ

AC_PROG_INSTALL

AC_SUBST(SHELL)

SRCDIR=`(cd $srcdir; pwd)`
AC_SUBST(SRCDIR)

dnl Specify the tempdir.
AC_ARG_WITH(tmpdir,
changequote(<<,>>)
<<  --with-tmpdir=DIR                Put temporary files in DIR [/tmp]>>,
changequote([,])
TMPDIR="$with_tmpdir")

TMPDIR=${TMPDIR-/tmp}
AC_SUBST(TMPDIR)

dnl Specify a mail server host for socket testing.  This allows you to
dnl choose a different server if 'mx10.gnu.org' is blocked by your firewall
AC_ARG_WITH(mailhost,
changequote(<<,>>)
<<  --with-mailhost=hostname         Server for socket tests [mx10.gnu.org]>>,
changequote([,])
MAIL_HOST="$with_mailhost")

MAIL_HOST=${MAIL_HOST-mx10.gnu.org}
AC_SUBST(MAIL_HOST)

if test ! -d gnu; then
  mkdir gnu
fi
if test ! -d gnu/testlet; then
  mkdir gnu/testlet
fi

AC_OUTPUT(Makefile gnu/testlet/config.java)
