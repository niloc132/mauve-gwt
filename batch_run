#!/bin/bash

# Copyright (c) 2002, 2004 Free Software Foundation, Inc.
# Written by Mark Wielaard <mark@klomp.org>

# This file is part of Mauve.

# Mauve is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.

# Mauve is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with Mauve; see the file COPYING.  If not, write to
# the Free Software Foundation, 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.

# Tries to compile and run all possible tests.
# Produces a FAIL output if compilation fails.
# COMPILER command can be set in the script
# For testing (gcj) native code compilation set NATIVE to 'true', otherwise
# don't set it.
# Uses runner script to run each individual test.
#
# Usage: run_batch > result_output
# Run in the source directory.

# Include every key/tag we can think of but always exclude the unicode test.
if test "x$KEYS" = "x"; then
KEYS="JDK1.0 JDK1.1 JDK1.2 JDK1.3 JDK1.4 JDBC1.0 JDBC2.0"
KEYS="$KEYS !java.lang.Character.unicode"
fi

if test "x$CLASSPATHBCP" = "x"; then
CLASSPATHBCP="/usr/local/classpath/share/classpath/glibj.zip"
fi

if test "x$COMPILER" = "x"; then
#COMPILER="gcj -C -Wno-deprecated"
COMPILER="jikes -nowarn -bootclasspath $CLASSPATHBCP"
fi

if test "x$COMPILER" = "xgcj"; then
COMPILER_FLAGS="-g -O0"
else
COMPILER_FLAGS="-g"
fi

if test "x$COMPILER" = "xgcj"; then
NATIVE="true"
else
NATIVE=
fi

# Cleanup
find gnu/testlet -name "*.class" | xargs rm -f
if test ! -z "$NATIVE"; then
    rm -f SimpleTestHarness
fi

# Create Mauve Framwork
framework_sources="gnu/testlet/SimpleTestHarness.java gnu/testlet/TestHarness.java gnu/testlet/Testlet.java gnu/testlet/ResourceNotFoundException.java gnu/testlet/TestSecurityManager.java gnu/testlet/config.java gnu/testlet/TestResult.java gnu/testlet/TestReport.java"

if test -z "$NATIVE"; then
    $COMPILER $COMPILER_FLAGS $framework_sources
fi

# Generate test classes list
./choose-classes . "$KEYS"

case $KEYS in
    *GUI*)

        if test -z "$SHOW_GUI_TESTS"; then
            XVFB=`which Xvfb`
            if test "x$WM" = "x"; then
                WM=`which metacity`
	        # check if we found metacity
                if test "x$WM" = "x"; then
                    WM=`which true`
                fi
            fi

            if test -z $XVFB; then
		echo "warning: Xvfb not found on PATH.  Showing GUI tests on main desktop..."
	    elif test -z $WM; then
		echo "warning: metacity not found on PATH.  Showing GUI tests on main desktop..."
            else
		export DISPLAY=:57
		echo localhost > Xvfb.cfg
		$XVFB :57 -auth Xvfb.cfg > /dev/null 2>&1 &
		XVFB_PID=$!
		$WM > /dev/null 2>&1 &
		WM_PID=$!
		rm -f Xvfb.cfg
	    fi
	fi
	;;
esac

# Compile and run all the tests
for testclass in `cat test_classes`; do
    # Get all needed java sources
    ./uses-list . $testclass

    # Try to compile sources
    if test -z "$NATIVE"; then
        $COMPILER $COMPILER_FLAGS @uses_files
    else
        $COMPILER $COMPILER_FLAGS -o SimpleTestHarness --main=gnu.testlet.SimpleTestHarness \
	          $framework_sources `cat uses_files`
    fi
    if test $?  = 0; then
        ./runner $testclass 2>&1 | egrep '^(PASS|FAIL): '
    else
        echo "FAIL: $testclass COMPILE FAILED"
    fi
done

case $KEYS in
    *GUI*)

        # killing Xvfb also kills the window manager process
        if test ! -z "$XVFB_PID"; then
            kill $XVFB_PID > /dev/null 2>&1
        fi
	;;
esac
