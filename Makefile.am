## Process this file with automake to produce Makefile.in.

AUTOMAKE_OPTIONS = foreign

JCFLAGS = -g
JC1FLAGS = -g

check_DATA = classes.stamp

## For now we just try to compile every Java file found in srcdir.
## This is specific to GNU make.
java_files := $(shell cd $(srcdir) && find gnu -name '*.java' -print)
test_files := $(shell cd $(srcdir) && find gnu/testlet/java -name '*.java' -print)
test_names := $(subst /,.,$(subst .java,,$(test_files)))

classes.stamp: $(java_files)
	here=`/bin/pwd`; cd $(srcdir); \
	  CLASSPATH=$$here:`/bin/pwd` $(JAVAC) $(JCFLAGS) -d $$here \
	    $(subst $(srcdir)/,,$?)
	touch classes.stamp


if USE_GCJ

## We must run a separate find because otherwise we won't find .class
## files generated by internal classes.  Note that we must force the
## Makefile to be re-read in order to make this magic work.  FIXME.
class_files := $(shell find gnu -name '*.class' -print)
javao_files := $(patsubst %.class,%.o,$(class_files))

BUILT_SOURCES = classes.stamp

check_PROGRAMS = SimpleTestHarness

SimpleTestHarness_SOURCES =
## FIXME: should have way to compile from .java directly to
## .o.  See libjava/Makefile.am.
SimpleTestHarness_DEPENDENCIES = classes.stamp $(javao_files)
SimpleTestHarness_LDADD = $(javao_files)
SimpleTestHarness_LDFLAGS = --main=gnu.testlet.SimpleTestHarness
## FIXME: this hack pulls in the LINK definition.  (This is a
## workaround for an automake bug.)
EXTRA_SimpleTestHarness_SOURCES = no-such-file.c

.class.o:
	CLASSPATH=.:$(srcdir) $(CC) -fassume-compiled $(JC1FLAGS) -c -o $@ $<

check-local: $(check_PROGRAMS)
	./SimpleTestHarness $(test_names)

MOSTLYCLEANFILES = $(javao_files)
CLEANFILES = $(class_files)

else  ## USE_GCJ

check-local: $(check_PROGRAMS)
	$(JAVA) gnu/testlet/SimpleTestHarness $(test_names)

endif ## USE_GCJ

## For now can't define this conditionally.
SUFFIXES = .class .java
