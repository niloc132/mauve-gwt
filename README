This is Mauve, a free test suite for the Java Class Libraries.

Mauve is intended to test several different varieties of the
libraries.  For instance, it will contain tests that are specific to a
particular JDK version.  Tags in the test files help the test
framework decide which tests should or should not be run against a
given runtime.


******BUILDING THE TESTSUITE*******
To build, first run configure.  You can control the configuration with
some environment variables:

     JAVA   Name of Java interpreter to use
     JAVAC  Name of Java (to class) compiler to use
     GCJ    Name of Java (to object) compiler to use

GCJ is only used when the `--with-gcj' option is given to configure.

The configure script also supports the following `--with' options:

     --with-tmpdir=DIR          Put temporary files in DIR
                                defaults to `/tmp'
     --with-mailhost=HOSTNAME   Use mail server at HOSTNAME for socket tests 
                                defaults to `mx10.gnu.org'
                                (Use this option if your local firewall
                                 blocks outgoing connections on port 25.)



*******RUNNING THE TESTS*******
The Mauve tests are run using the harness script in the top directory.  To run
all the tests using your system default "java" VM, type "./harness".

This is rarely what developers want to do, so below we provide details on how
to do the following:

  1.  Specify the VM on which to run the tests
  2.  Select a subset of the tests to run
  3.  Use an input file to specify the tests to run
  4.  Change the timeout interval
  5.  Change the information displayed when tests are run
  

1.  Specifying the VM on which to run the tests

  This can be done in 2 ways: setting the environment variable MAUVEVM, or 
  using the -vm [vmpath] option when running the harness script.  The latter
  overrides the former, so you can set MAUVEVM to be the VM that you usually
  use, and can use the -vm option when you occasionally want to use another VM.

  If, for example, I wanted to run all the JTable tests using JamVM, and then 
  run them all on Sun's VM for comparison, I would type:

  ./harness javax.swing.JTable -vm jamvm

  and then

  ./harness javax.swing.JTable -vm java

  if "java" was a system command to run Sun's VM.  If not, you should specify
  the path to Sun's "java" executable (ex: /usr/lib/java-1.5.0/bin/java).


2.  Selecting a subset of the tests to run

  This is a common task for developers, you may be working to fix a bug in a 
  certain area and want to run all the related tests, but not the entire
  testsuite.  Simply specify the folder containing the tests, and all the tests
  in that folder (and its subfolders, although this can be turned off) will be 
  run.

  Example: run all the java.net tests (remember, this uses system default 
  "java" unless you have environment variable MAUVEVM set):

  1.  ./harness java.net
  2.  ./harness gnu.testlet.java.net
  3.  ./harness gnu/testlet/java/net
  3.  ./harness gnu/testlet/java/net/
  *   It makes no difference if you use "." or "/", or if you have the
      "gnu.testlet" preceeding the test folder or if you have a trailing "/".
      
  You may want to exclude certain tests from a run, this done using the
  -exclude option.  Extending our previous example, let's run all the java.net
  tests except for the java.net.Socket tests.
      
  1.  ./harness java.net -exclude java.net.Socket
  2.  ./harness -exclude java.net.Socket java.net

  The test or folder you want to exclude must follow the -exclude option, but 
  other than that, the order doesn't matter.  In example #2 above java.net is
  still taken to be tests you want to run, not tests you want to exclude.  So
  if you want to exclude more than one folder, you need to use the -exclude
  flag multiple times.
  
  If a folder has several subfolders and you want to exclude them all, you
  can use the -norecursion option instead of explicitly excluding them 
  all.  So to run the AbstractDocument tests but not the BranchElement or
  LeafElement tests, type:
  
  ./harness javax.swing.text.AbstractDocument -norecursion
  
  Again, the order of the arguments/options after ./harness doesn't matter.
  
  
3.  Using an input file to specify tests to be run

  Simply use the -file [filename] option.  The input file should list, one per
  line, the tests or folders you want to test.

  Example: ./harness -file myInputFile

  The input file specifies only tests to be run, not excluded, to exclude tests
  you need to explicitly do so as in Section 2 above. 

  Example: ./harness -file myInputFile -exclude java.net.Socket
  

4.  Changing the timeout interval

  The Harness detects tests that have hung and terminates them.  It does so 
  simply by allowing all tests to run for 60 seconds and if they haven't 
  completed, declaring them hung.  If a test simply takes a long time you may
  want to increase this interval.  If on the other hand, no passing tests take
  longer than a few seconds and hanging tests are slowing down your test runs,
  you may want to decrease the interval.  To set the timeout interval use
  the -timeout [interval] option.  The interval is specified in milliseconds.

  Example: ./harness gnu.java.security -timeout 30000
  
  will set the timeout to be 30 seconds instead of 60.
  
  
5.  Changing the information displayed during test runs

  By default the Harness prints only messages for those tests that fail, and 
  only prints minimal information about uncaught exceptions. The following
  options affect what is printed:
  
  -verbose: prints information about each passing harness.check() call within
  the tests, whether they pass or fail.
  
  -exceptions: prints full stack traces for uncaught exceptions
  
  -showpasses: prints one-line summaries for passing tests
  
  -debug:      prints toString() information when a 
               harness.check(Object, Object) call fails.
  

